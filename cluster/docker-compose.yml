---
version: '3.7'

networks:
  default:
    external:
      name: ksd

# you will looks data data on docker-compose down, unless you use/enable volumes.
# personally, I prefer ephemeral docker images for showcasing concepts as it is
# super easy to rebuild evertyhing from scratch
# 
#volumes:
#  zookeeper_data: {}
#  broker-1_data: {}
#  broker-2_data: {}
#  broker-3_data: {}
#  broker-4_data: {}

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.2
    hostname: zookeeper
    container_name: ksd_zookeeper
    ports:
      - '2181:2181'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      #- zookeeper_data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/zookeeper-config.yml

  broker-1:
    image: confluentinc/cp-kafka:6.0.2
    hostname: broker-1
    container_name: ksd_broker-1
    depends_on:
      - zookeeper
    ports:
      - '17071:7071'
      - '19092:19092'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      #- broker-1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_METRIC_REPORTERS:
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'


  broker-2:
    image: confluentinc/cp-kafka:6.0.2
    hostname: broker-2
    container_name: ksd_broker-2
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      #- broker-2_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'

  broker-3:
    image: confluentinc/cp-kafka:6.0.2
    hostname: broker-3
    container_name: ksd_broker-3
    depends_on:
      - zookeeper
    ports:
      - '39092:39092'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      #- broker-3_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'

  broker-4:
    image: confluentinc/cp-kafka:6.0.2
    hostname: broker-4
    container_name: ksd_broker-4
    depends_on:
      - zookeeper
    ports:
      - '49092:49092'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      #- broker-4_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-4:9092,PLAINTEXT_HOST://localhost:49092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'

#  schema-registry:
#    image: confluentinc/cp-schema-registry:6.0.2
#    hostname: schema-registry
#    container_name: ksd_schema-registry
#    depends_on:
#      - broker-1
#      - broker-2
#      - broker-3
#      - broker-4
#    ports:
#      - '8081:8081'
#    volumes:
#      - ./jmx_prometheus:/opt/jmx_prometheus
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
#      KAFKA_METRIC_REPORTERS:
#      CONFLUENT_METRICS_ENABLE: 'false'
#      SCHEMA_REGISTRY_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml
